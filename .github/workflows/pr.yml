name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_review:
    types: [submitted]

env:
  GO_VERSION: '1.21'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install testing tools
      run: |
        # Install golangci-lint
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
        # Install gosec for security scanning
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Make test script executable
      run: chmod +x scripts/test-all.sh

    - name: Run comprehensive test suite
      id: tests
      run: |
        echo "Running comprehensive test suite..."
        ./scripts/test-all.sh --verbose
        
        # Extract coverage from the generated coverage.out file
        if [ -f coverage.out ]; then
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Test coverage: $COVERAGE%"
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
          # Check if coverage is acceptable (>40%)
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "test_status=⚠️ Coverage below 40%" >> $GITHUB_OUTPUT
          else
            echo "test_status=✅ All tests passed" >> $GITHUB_OUTPUT
          fi
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "test_status=❌ No coverage data" >> $GITHUB_OUTPUT
        fi

    - name: Run quality gate check
      id: lint_full
      run: |
        echo "Running quality gate check..."
        chmod +x scripts/lint-check.sh
        ./scripts/lint-check.sh > lint_output.txt 2>&1
        LINT_EXIT_CODE=$?
        
        # Extract issue count from the script output
        TOTAL_ISSUES=$(grep "Issues found:" lint_output.txt | grep -o "[0-9]*" || echo "0")
        echo "Total issues: $TOTAL_ISSUES"
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        # Quality gate
        if [ $LINT_EXIT_CODE -eq 0 ]; then
          echo "lint_status=✅ Quality gate passed ($TOTAL_ISSUES ≤ 15)" >> $GITHUB_OUTPUT
          echo "quality_gate=passed" >> $GITHUB_OUTPUT
        else
          echo "lint_status=❌ Too many issues ($TOTAL_ISSUES > 15)" >> $GITHUB_OUTPUT
          echo "quality_gate=failed" >> $GITHUB_OUTPUT
        fi
        
        # Show the output
        cat lint_output.txt
        
        # Note: Don't exit with failure here - let the workflow continue to report results

    - name: Build check
      id: build
      run: |
        echo "Building application..."
        if go build ./cmd/t212-taxes; then
          echo "build_status=✅ Build successful" >> $GITHUB_OUTPUT
        else
          echo "build_status=❌ Build failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Update PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const totalIssues = '${{ steps.lint_full.outputs.total_issues }}';
          const qualityGate = '${{ steps.lint_full.outputs.quality_gate }}';
          const testStatus = '${{ steps.tests.outputs.test_status }}';
          const coverage = '${{ steps.tests.outputs.coverage }}';
          const lintStatus = '${{ steps.lint_full.outputs.lint_status }}';
          const buildStatus = '${{ steps.build.outputs.build_status }}';
          
          const overallStatus = qualityGate === 'passed' ? '🟢 READY TO MERGE' : '🔴 NEEDS ATTENTION';
          
          const comment = `## 🔍 Pull Request Validation Report
          
          ### Overall Status: ${overallStatus}
          
          | Check | Status | Details |
          |-------|--------|---------|
          | 🧪 **Tests** | ${testStatus} | Coverage: ${coverage}% |
          | 🔍 **Linting** | ${lintStatus} | Total issues: ${totalIssues} |
          | 🏗️ **Build** | ${buildStatus} | Application compilation |
          | 🎯 **Quality Gate** | ${qualityGate === 'passed' ? '✅ PASSED' : '❌ FAILED'} | Max 15 issues allowed |
          
          ${qualityGate === 'failed' ? 
            '### ⚠️ Action Required\n- Please fix linting issues before merging\n- Run \`golangci-lint run --timeout=10m\` locally to see details' : 
            '### 🎉 All Checks Passed\n- This PR is ready for review and merge\n- All quality gates have been satisfied'
          }
          
          <details>
          <summary>🔧 How to run tests locally</summary>
          
          \`\`\`bash
          # Run complete test suite (recommended)
          ./scripts/test-all.sh
          
          # Quick development testing
          ./scripts/test-all.sh --quick
          
          # Verbose output for debugging
          ./scripts/test-all.sh --verbose
          
          # Just quality gate check
          ./scripts/lint-check.sh
          \`\`\`
          
          📖 See [Testing Guide](docs/TESTING.md) for comprehensive testing documentation.
          
          **Common lint fixes:**
          - \`gocyclo\`: Reduce function complexity
          - \`lll\`: Shorten long lines  
          - \`prealloc\`: Pre-allocate slices when size is known
          - \`unparam\`: Remove unused parameters
          </details>
          
          ---
          *Last updated: ${new Date().toISOString()}*`;
          
          // Find and update existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Pull Request Validation Report')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Set PR status
      run: |
        if [ "${{ steps.lint_full.outputs.quality_gate }}" = "failed" ]; then
          echo "❌ PR validation failed - quality gate not met"
          exit 1
        else
          echo "✅ PR validation passed - ready for review"
        fi 