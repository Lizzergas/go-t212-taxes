name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_review:
    types: [submitted]

env:
  GO_VERSION: '1.21'

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      id: tests
      run: |
        echo "Running test suite..."
        go test -v -race -coverprofile=coverage.out ./...
        
        # Calculate coverage
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: $COVERAGE%"
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        
        # Check if coverage is acceptable (>70%)
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "test_status=⚠️ Coverage below 70%" >> $GITHUB_OUTPUT
        else
          echo "test_status=✅ All tests passed" >> $GITHUB_OUTPUT
        fi

    - name: Run golangci-lint (New issues only)
      id: lint_new
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=10m --new-from-rev=${{ github.event.pull_request.base.sha }} --out-format=json
        only-new-issues: true
      continue-on-error: true

    - name: Run full lint check
      id: lint_full
      run: |
        # Install golangci-lint
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v2.1.6
        
        # Run full lint and count issues
        echo "Running full linting check..."
        golangci-lint run --timeout=10m --out-format=json > lint_results.json 2>/dev/null || true
        
        # Count total issues
        TOTAL_ISSUES=$(jq -r '.Issues | length' lint_results.json 2>/dev/null || echo "0")
        echo "Total issues: $TOTAL_ISSUES"
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        # Quality gate
        if [ "$TOTAL_ISSUES" -gt 15 ]; then
          echo "lint_status=❌ Too many issues ($TOTAL_ISSUES > 15)" >> $GITHUB_OUTPUT
          echo "quality_gate=failed" >> $GITHUB_OUTPUT
        else
          echo "lint_status=✅ Quality gate passed ($TOTAL_ISSUES ≤ 15)" >> $GITHUB_OUTPUT
          echo "quality_gate=passed" >> $GITHUB_OUTPUT
        fi
        
        # Extract issue breakdown
        if [ -f lint_results.json ] && [ "$TOTAL_ISSUES" -gt 0 ]; then
          echo "Issue breakdown:" >> $GITHUB_STEP_SUMMARY
          jq -r '.Issues | group_by(.FromLinter) | .[] | "\(.[0].FromLinter): \(length)"' lint_results.json >> $GITHUB_STEP_SUMMARY
        fi

    - name: Build check
      id: build
      run: |
        echo "Building application..."
        if go build ./cmd/t212-taxes; then
          echo "build_status=✅ Build successful" >> $GITHUB_OUTPUT
        else
          echo "build_status=❌ Build failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Update PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const totalIssues = '${{ steps.lint_full.outputs.total_issues }}';
          const qualityGate = '${{ steps.lint_full.outputs.quality_gate }}';
          const testStatus = '${{ steps.tests.outputs.test_status }}';
          const coverage = '${{ steps.tests.outputs.coverage }}';
          const lintStatus = '${{ steps.lint_full.outputs.lint_status }}';
          const buildStatus = '${{ steps.build.outputs.build_status }}';
          
          const overallStatus = qualityGate === 'passed' ? '🟢 READY TO MERGE' : '🔴 NEEDS ATTENTION';
          
          const comment = `## 🔍 Pull Request Validation Report
          
          ### Overall Status: ${overallStatus}
          
          | Check | Status | Details |
          |-------|--------|---------|
          | 🧪 **Tests** | ${testStatus} | Coverage: ${coverage}% |
          | 🔍 **Linting** | ${lintStatus} | Total issues: ${totalIssues} |
          | 🏗️ **Build** | ${buildStatus} | Application compilation |
          | 🎯 **Quality Gate** | ${qualityGate === 'passed' ? '✅ PASSED' : '❌ FAILED'} | Max 15 issues allowed |
          
          ${qualityGate === 'failed' ? 
            '### ⚠️ Action Required\n- Please fix linting issues before merging\n- Run \`golangci-lint run --timeout=10m\` locally to see details' : 
            '### 🎉 All Checks Passed\n- This PR is ready for review and merge\n- All quality gates have been satisfied'
          }
          
          <details>
          <summary>📋 How to fix linting issues</summary>
          
          1. Run locally: \`golangci-lint run --timeout=10m\`
          2. Fix issues or add appropriate \`//nolint\` comments
          3. Push changes to update this PR
          
          Common fixes:
          - \`gocyclo\`: Reduce function complexity
          - \`lll\`: Shorten long lines  
          - \`prealloc\`: Pre-allocate slices when size is known
          - \`unparam\`: Remove unused parameters
          </details>
          
          ---
          *Last updated: ${new Date().toISOString()}*`;
          
          // Find and update existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Pull Request Validation Report')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Set PR status
      run: |
        if [ "${{ steps.lint_full.outputs.quality_gate }}" = "failed" ]; then
          echo "❌ PR validation failed - quality gate not met"
          exit 1
        else
          echo "✅ PR validation passed - ready for review"
        fi 