name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

# Global permissions for the workflow
permissions:
  contents: read
  pull-requests: read
  security-events: write  # Required for SARIF upload
  actions: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # For PR comments
      checks: write         # For check runs
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for new-from-rev

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run tests
      run: |
        echo "Running tests..."
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out
        
    - name: Run golangci-lint (Don't fail CI)
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=10m
      continue-on-error: true  # Don't fail CI - we'll handle this in quality gate
      
    # Make sure golangci-lint binary is available for our quality gate check
    - name: Ensure golangci-lint is available
      run: |
        # The golangci-lint-action should have installed it, but let's verify
        if ! command -v golangci-lint &> /dev/null; then
          echo "golangci-lint not found in PATH, installing..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
          export PATH=$PATH:$(go env GOPATH)/bin
        fi
        golangci-lint version

    - name: Check issue count and quality gate
      id: quality_gate
      run: |
        echo "Checking linting results..."
        
        # The golangci-lint action already ran - we'll use the same binary
        # Count issues from the previous run by running it again and parsing output
        echo "Running golangci-lint to count issues..."
        
        # Run lint and capture both stdout and stderr, allow failure
        LINT_OUTPUT=$(golangci-lint run --timeout=10m 2>&1 || true)
        
        # Count issues by looking for lines that match the error pattern
        # Format: "file:line:col: message (linter)"
        ISSUE_COUNT=$(echo "$LINT_OUTPUT" | grep -c "^[^:]*:[0-9]*:[0-9]*:" || echo "0")
        
        # Also try to extract from summary line if present
        # Format: "X issues:"
        SUMMARY_COUNT=$(echo "$LINT_OUTPUT" | grep -o "[0-9]* issues:" | grep -o "[0-9]*" || echo "")
        
        # Use summary count if available, otherwise use line count
        if [[ "$SUMMARY_COUNT" =~ ^[0-9]+$ ]] && [ "$SUMMARY_COUNT" -gt 0 ]; then
          ISSUE_COUNT=$SUMMARY_COUNT
        fi
        
        # Ensure we have a valid number
        if ! [[ "$ISSUE_COUNT" =~ ^[0-9]+$ ]]; then
          ISSUE_COUNT=0
        fi
        
        echo "Found $ISSUE_COUNT linting issues"
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
        
        # Quality gate: Allow up to 15 issues (current: 5)
        THRESHOLD=15
        if [ "$ISSUE_COUNT" -le "$THRESHOLD" ]; then
          echo "‚úÖ Quality gate PASSED: $ISSUE_COUNT issues (‚â§ $THRESHOLD allowed)"
          echo "quality_status=passed" >> $GITHUB_OUTPUT
          echo "status_emoji=‚úÖ" >> $GITHUB_OUTPUT
          # Don't fail CI for issues within threshold
          exit 0
        else
          echo "‚ùå Quality gate FAILED: $ISSUE_COUNT issues (> $THRESHOLD allowed)" 
          echo "quality_status=failed" >> $GITHUB_OUTPUT
          echo "status_emoji=‚ùå" >> $GITHUB_OUTPUT
          # Fail CI only if we exceed threshold
          echo "Failing CI due to too many linting issues"
          exit 1
        fi

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const issueCount = '${{ steps.quality_gate.outputs.issue_count }}';
          const qualityStatus = '${{ steps.quality_gate.outputs.quality_status }}';
          const statusEmoji = '${{ steps.quality_gate.outputs.status_emoji }}';
          
          const comment = `## üîç Code Quality Report
          
          ### Linting Results
          - **Total Issues**: ${issueCount}
          - **Quality Gate**: ${statusEmoji} ${qualityStatus.toUpperCase()}
          - **Threshold**: 15 issues maximum
          
          ### Test Results  
          - **Status**: ‚úÖ All tests passing
          - **Coverage**: Report generated
          
          ${qualityStatus === 'failed' ? 
            '### ‚ö†Ô∏è Note\nThis PR exceeds our quality threshold. Consider fixing issues before merging.' : 
            '### üéâ Quality Check\nThis PR meets our quality standards!'
          }
          
          <details>
          <summary>üîß How to check locally</summary>
          
          \`\`\`bash
          # Run full linting check
          golangci-lint run --timeout=10m
          
          # Get issue count  
          golangci-lint run --timeout=10m --out-format=json | jq '.Issues | length'
          \`\`\`
          </details>
          
          ---
          *Updated: ${new Date().toISOString()}*`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('üîç Code Quality Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        echo "Installing gosec..."
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        echo "Running gosec security scan..."
        gosec -fmt sarif -out gosec.sarif ./... || {
          echo "Gosec found security issues (exit code: $?), but continuing..."
          echo "This is expected behavior when security issues are found."
        }
        
        echo "Gosec scan completed. Checking output..."
        if [ -f "gosec.sarif" ]; then
          echo "SARIF file created successfully"
          echo "File size: $(wc -c < gosec.sarif) bytes"
          echo "Sample content:"
          head -n 10 gosec.sarif
        else
          echo "Warning: SARIF file was not created"
        fi

    - name: Check if SARIF file exists
      id: sarif_check
      run: |
        if [ -f "gosec.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "SARIF file exists and has size: $(wc -c < gosec.sarif) bytes"
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "SARIF file does not exist"
        fi

    - name: Display security scan summary
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      run: |
        echo "=== Security Scan Summary ==="
        echo "Running human-readable gosec output for logs..."
        gosec ./... || {
          echo "Security issues found. Check the SARIF file for details."
          echo "This is normal if security issues exist in the codebase."
        }
        echo "=== End Summary ==="

    - name: Upload SARIF file
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        category: gosec
      continue-on-error: true  # Don't fail the workflow if SARIF upload fails

    - name: Upload SARIF as artifact (fallback)
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: gosec-sarif
        path: gosec.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        binary_name="t212-taxes"
        if [ "$GOOS" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/} -X main.commit=${GITHUB_SHA} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o "dist/${binary_name}-${GOOS}-${GOARCH}" ./cmd/t212-taxes
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required for creating releases
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release directory
      run: |
        mkdir -p release
        find artifacts/ -name "t212-taxes*" -exec cp {} release/ \;

    - name: Generate changelog
      id: changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "## Changes" > CHANGELOG.md
          echo "See commit history for detailed changes." >> CHANGELOG.md
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write  # Required for pushing to GitHub Container Registry
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 