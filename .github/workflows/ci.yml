name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

# Global permissions for the workflow
permissions:
  contents: read
  pull-requests: read
  security-events: write  # Required for SARIF upload
  actions: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=10m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        echo "Installing gosec..."
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        echo "Running gosec security scan..."
        gosec -fmt sarif -out gosec.sarif ./... || {
          echo "Gosec found security issues (exit code: $?), but continuing..."
          echo "This is expected behavior when security issues are found."
        }
        
        echo "Gosec scan completed. Checking output..."
        if [ -f "gosec.sarif" ]; then
          echo "SARIF file created successfully"
          echo "File size: $(wc -c < gosec.sarif) bytes"
          echo "Sample content:"
          head -n 10 gosec.sarif
        else
          echo "Warning: SARIF file was not created"
        fi

    - name: Check if SARIF file exists
      id: sarif_check
      run: |
        if [ -f "gosec.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "SARIF file exists and has size: $(wc -c < gosec.sarif) bytes"
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "SARIF file does not exist"
        fi

    - name: Display security scan summary
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      run: |
        echo "=== Security Scan Summary ==="
        echo "Running human-readable gosec output for logs..."
        gosec ./... || {
          echo "Security issues found. Check the SARIF file for details."
          echo "This is normal if security issues exist in the codebase."
        }
        echo "=== End Summary ==="

    - name: Upload SARIF file
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        category: gosec
      continue-on-error: true  # Don't fail the workflow if SARIF upload fails

    - name: Upload SARIF as artifact (fallback)
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: gosec-sarif
        path: gosec.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        binary_name="t212-taxes"
        if [ "$GOOS" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/} -X main.commit=${GITHUB_SHA} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o "dist/${binary_name}-${GOOS}-${GOARCH}" ./cmd/t212-taxes
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required for creating releases
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release directory
      run: |
        mkdir -p release
        find artifacts/ -name "t212-taxes*" -exec cp {} release/ \;

    - name: Generate changelog
      id: changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "## Changes" > CHANGELOG.md
          echo "See commit history for detailed changes." >> CHANGELOG.md
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write  # Required for pushing to GitHub Container Registry
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 