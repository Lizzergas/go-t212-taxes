name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'

# Global permissions for the workflow
permissions:
  contents: read
  pull-requests: read
  security-events: write  # Required for SARIF upload
  actions: read

jobs:
  test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.test_suite.outputs.coverage }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Debug repository contents
      run: |
        echo "=== DEBUGGING CI ENVIRONMENT ==="
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        find . -name "*.go" | head -20
        echo ""
        echo "cmd/t212-taxes directory contents:"
        ls -la cmd/t212-taxes/
        echo ""
        echo "Files Go sees in cmd/t212-taxes package:"
        go list -f '{{.GoFiles}}' ./cmd/t212-taxes
        echo ""
        echo "Checking for getVersionInfo function:"
        grep -n "getVersionInfo" cmd/t212-taxes/*.go || echo "getVersionInfo not found"
        echo ""
        echo "Content of main.go around line 29:"
        sed -n '25,35p' cmd/t212-taxes/main.go
        echo ""
        echo "Content of version.go (first 15 lines):"
        head -15 cmd/t212-taxes/version.go
        echo ""
        echo "=== END DEBUG ==="

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Clean Go cache and setup modules
      run: |
        # Clean Go cache to avoid compilation issues
        go clean -cache
        go clean -modcache
        
        # Explicit module management
        go mod download
        go mod verify
        go mod tidy
        
        # Verify main package can compile
        echo "Testing main package compilation..."
        go build -v ./cmd/t212-taxes
        
        # Install gosec for security scanning
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        # Verify installations
        ./t212-taxes version || echo "Version command not yet working (this is expected)"
        gosec --version
        
        # Clean up test binary
        rm -f t212-taxes

    - name: Make test script executable
      run: chmod +x scripts/test-all.sh

    - name: Verify Go compilation
      run: |
        echo "=== TESTING PACKAGE COMPILATION ==="
        
        # Show exactly what Go sees
        echo "Go package info:"
        go list -f 'Package: {{.ImportPath}}' ./cmd/t212-taxes
        go list -f 'Go files: {{.GoFiles}}' ./cmd/t212-taxes
        
        echo ""
        echo "Attempting to build cmd/t212-taxes..."
        if go build -v ./cmd/t212-taxes 2>&1; then
          echo "‚úÖ Build successful!"
          ls -la t212-taxes
          rm -f t212-taxes
        else
          echo "‚ùå Build failed! Let's investigate..."
          echo ""
          echo "Package declarations check:"
          echo "main.go:" && head -5 cmd/t212-taxes/main.go | grep "^package"
          echo "version.go:" && head -5 cmd/t212-taxes/version.go | grep "^package"
          echo ""
          echo "getVersionInfo function check:"
          grep -A3 "func getVersionInfo" cmd/t212-taxes/version.go || echo "Function not found!"
          echo ""
          echo "FAILING: Build compilation failed in CI"
          exit 1
        fi
        
        echo "Running version-related tests..."
        go test ./cmd/t212-taxes -v -run TestGetVersionInfo || echo "Version tests not found or failed"

    - name: Run comprehensive test suite
      id: test_suite
      run: |
        echo "Running comprehensive test suite..."
        ./scripts/test-all.sh --verbose --skip-lint
        
        # Extract coverage from the generated coverage.out file
        if [ -f coverage.out ]; then
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Test coverage: $COVERAGE%"
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "Warning: No coverage file generated"
        fi



    - name: Upload coverage artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 7



  lint:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: test  # Run after main test suite
    permissions:
      contents: read
      pull-requests: write  # For PR comments
      checks: write         # For check runs
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        # Install golangci-lint
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq

    - name: Run golangci-lint with detailed output
      id: golangci_lint
      run: |
        echo "Running golangci-lint with detailed output..."
        
        # Run golangci-lint and capture output
        golangci-lint run --timeout=10m --out-format=json:lint-results.json --out-format=line-number 2>&1 | tee lint-output.txt || true
        
        # Count issues and extract details
        if [ -f "lint-results.json" ]; then
          # Parse JSON for specific issue details
          ISSUE_COUNT=$(jq '.Issues | length' lint-results.json 2>/dev/null || echo "0")
          echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          
          # Get unique linter names that found issues
          LINTERS=$(jq -r '.Issues | group_by(.FromLinter) | map(.[0].FromLinter) | join(", ")' lint-results.json 2>/dev/null || echo "none")
          echo "linters_with_issues=$LINTERS" >> $GITHUB_OUTPUT
          
          # Get top 5 specific issues
          ISSUES_SUMMARY=$(jq -r '.Issues[:5] | map("‚Ä¢ \(.Text) (\(.FromLinter))") | join("\n")' lint-results.json 2>/dev/null || echo "No specific issues found")
          echo "issues_summary<<EOF" >> $GITHUB_OUTPUT
          echo "$ISSUES_SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "issue_count=0" >> $GITHUB_OUTPUT
          echo "linters_with_issues=none" >> $GITHUB_OUTPUT
          echo "issues_summary=No issues found" >> $GITHUB_OUTPUT
        fi
        
        # Set quality gate status
        if [ "${ISSUE_COUNT:-0}" -le 15 ]; then
          echo "quality_status=passed" >> $GITHUB_OUTPUT
          echo "status_emoji=‚úÖ" >> $GITHUB_OUTPUT
        else
          echo "quality_status=failed" >> $GITHUB_OUTPUT  
          echo "status_emoji=‚ùå" >> $GITHUB_OUTPUT
        fi
        
        echo "Linting completed. Found $ISSUE_COUNT issues."

    - name: Display lint issues summary in CI logs
      run: |
        echo "=============================================";
        echo "üìã LINTING RESULTS SUMMARY";
        echo "=============================================";
        echo "Issues found: ${{ steps.golangci_lint.outputs.issue_count }}";
        echo "Quality gate: ${{ steps.golangci_lint.outputs.status_emoji }} ${{ steps.golangci_lint.outputs.quality_status }}";
        echo "Linters with issues: ${{ steps.golangci_lint.outputs.linters_with_issues }}";
        echo "";
        
        if [ "${{ steps.golangci_lint.outputs.issue_count }}" -gt 0 ]; then
          echo "üìã SPECIFIC ISSUES FOUND:";
          echo "------------------------";
          if [ -f "lint-results.json" ]; then
            # Show all issues from JSON
            jq -r '.Issues[] | "‚Ä¢ \(.Pos.Filename):\(.Pos.Line):\(.Pos.Column): \(.Text) (\(.FromLinter))"' lint-results.json || {
              echo "Error parsing JSON, showing raw output:";
              cat lint-output.txt;
            }
          else
            echo "No JSON output available, showing raw linter output:";
            cat lint-output.txt;
          fi
          echo "";
          echo "üí° To fix these issues locally, run:";
          echo "   ./scripts/lint-check.sh";
          echo "   ./scripts/test-all.sh --skip-security --skip-coverage";
        else
          echo "‚úÖ No linting issues found!";
        fi
        echo "=============================================";

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const issueCount = '${{ steps.golangci_lint.outputs.issue_count }}';
          const qualityStatus = '${{ steps.golangci_lint.outputs.quality_status }}';
          const statusEmoji = '${{ steps.golangci_lint.outputs.status_emoji }}';
          const lintersWithIssues = '${{ steps.golangci_lint.outputs.linters_with_issues }}';
          const issuesSummary = `${{ steps.golangci_lint.outputs.issues_summary }}`;
          const coverage = '${{ needs.test.outputs.coverage || '0' }}';
          
          const comment = `## üîç Pipeline Results
          
          ### Test Suite Results
          - **Tests**: ‚úÖ All tests passing
          - **Coverage**: ${coverage}% 
          - **Build**: ‚úÖ Build successful
          - **Security**: ‚úÖ Security scan completed
          
          ### Linting Results
          - **Total Issues**: ${issueCount}
          - **Quality Gate**: ${statusEmoji} ${qualityStatus.toUpperCase()}
          - **Threshold**: 15 issues maximum
          - **Linters with Issues**: ${lintersWithIssues}
          
          ${issueCount > 0 ? `
          #### Issues Found:
          \`\`\`
          ${issuesSummary}
          \`\`\`
          ${issueCount > 5 ? `\n*Showing top 5 issues. Run \`golangci-lint run\` locally to see all ${issueCount} issues.*` : ''}
          ` : ''}
          
          ${qualityStatus === 'failed' ? 
            '### ‚ö†Ô∏è Action Required\nThis PR exceeds our quality threshold. Please fix the linting issues before merging.' : 
            ''
          }
          
          <details>
          <summary>üîß How to run tests locally</summary>
          
          \`\`\`bash
          # Run complete test suite (recommended)
          ./scripts/test-all.sh
          
          # Quick development testing
          ./scripts/test-all.sh --quick
          
          # Verbose output for debugging
          ./scripts/test-all.sh --verbose
          
          # Just quality gate check
          ./scripts/lint-check.sh
          \`\`\`
          
          üìñ See [Testing Guide](docs/TESTING.md) for more details.
          </details>
          
          ---
          *Powered by comprehensive test suite - Last updated: ${new Date().toISOString()}*`;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('üîç Pipeline Results')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        echo "Installing gosec..."
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        echo "Running gosec security scan..."
        gosec -fmt sarif -out gosec.sarif ./... || {
          echo "Gosec found security issues (exit code: $?), but continuing..."
          echo "This is expected behavior when security issues are found."
        }
        
        echo "Gosec scan completed. Checking output..."
        if [ -f "gosec.sarif" ]; then
          echo "SARIF file created successfully"
          echo "File size: $(wc -c < gosec.sarif) bytes"
          echo "Sample content:"
          head -n 10 gosec.sarif
        else
          echo "Warning: SARIF file was not created"
        fi

    - name: Check if SARIF file exists
      id: sarif_check
      run: |
        if [ -f "gosec.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "SARIF file exists and has size: $(wc -c < gosec.sarif) bytes"
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "SARIF file does not exist"
        fi

    - name: Display security scan summary
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      run: |
        echo "=============================================";
        echo "üîí SECURITY SCAN RESULTS";
        echo "=============================================";
        echo "Running human-readable gosec output for logs...";
        echo "";
        
        # Capture gosec output and exit code
        GOSEC_OUTPUT=$(gosec ./... 2>&1 || true)
        GOSEC_EXIT_CODE=$?
        
        echo "$GOSEC_OUTPUT";
        echo "";
        
        if [ $GOSEC_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ No security issues found!";
        else
          echo "‚ö†Ô∏è  Security issues detected (exit code: $GOSEC_EXIT_CODE)";
          echo "üìã Issues have been uploaded to GitHub Security tab";
          echo "üí° Review the security findings and address as needed";
        fi
        echo "=============================================";

    - name: Display detailed security issues (if any)
      run: |
        echo "üîç DETAILED SECURITY ANALYSIS";
        echo "==============================";
        echo "Running gosec with detailed output...";
        echo "";
        
        # Run gosec with verbose output to show specific issues
        gosec -fmt text ./... 2>&1 | head -50 || {
          echo "Security scan completed. If issues were found, they are detailed above.";
        }
        echo "";
        echo "üí° For local security scanning, install gosec:";
        echo "   go install github.com/securego/gosec/v2/cmd/gosec@latest";
        echo "   gosec ./...";
        echo "==============================";

    - name: Upload SARIF file
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        category: gosec
      continue-on-error: true  # Don't fail the workflow if SARIF upload fails

    - name: Upload SARIF as artifact (fallback)
      if: steps.sarif_check.outputs.sarif_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: gosec-sarif
        path: gosec.sarif

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        binary_name="t212-taxes"
        if [ "$GOOS" = "windows" ]; then
          binary_name="${binary_name}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/} -X main.commit=${GITHUB_SHA} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o "dist/${binary_name}-${GOOS}-${GOARCH}" ./cmd/t212-taxes
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  pipeline_summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()  # Run even if some jobs fail
    steps:
    - name: Display final pipeline results
      run: |
        echo "============================================="
        echo "üèÅ PIPELINE COMPLETION SUMMARY"
        echo "============================================="
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo ""
        
        # Test results
        echo "üìã TEST RESULTS:"
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "  ‚úÖ Tests: PASSED"
          echo "  üìä Coverage: ${{ needs.test.outputs.coverage || 'N/A' }}%"
        else
          echo "  ‚ùå Tests: FAILED"
        fi
        echo ""
        
        # Lint results  
        echo "üîç LINTING RESULTS:"
        if [ "${{ needs.lint.result }}" = "success" ]; then
          echo "  ‚úÖ Linting: PASSED"
          echo "  üìà Quality Gate: Passed"
        else
          echo "  ‚ùå Linting: FAILED"
          echo "  üìà Quality Gate: Failed (check logs above)"
        fi
        echo ""
        
        # Security results
        echo "üîí SECURITY RESULTS:"
        if [ "${{ needs.security.result }}" = "success" ]; then
          echo "  ‚úÖ Security Scan: COMPLETED"
        else
          echo "  ‚ö†Ô∏è  Security Scan: ISSUES FOUND (check logs)"
        fi
        echo ""
        
        # Build results
        echo "üî® BUILD RESULTS:"
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "  ‚úÖ Build: SUCCESS"
        else
          echo "  ‚ùå Build: FAILED"
        fi
        echo ""
        
        # Overall status
        echo "üéØ OVERALL PIPELINE STATUS:"
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.lint.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
          echo "  üéâ SUCCESS - All critical checks passed!"
          echo "  üöÄ Code is ready for merge/deployment"
        else
          echo "  ‚ö†Ô∏è  ISSUES DETECTED - Review failures above"
          echo "  üîß Fix issues before merging"
        fi
        echo ""
        
        echo "üí° LOCAL DEVELOPMENT COMMANDS:"
        echo "  ./scripts/test-all.sh          # Complete test suite"
        echo "  ./scripts/ci-test.sh           # CI simulation"  
        echo "  ./scripts/lint-check.sh        # Quality gate check"
        echo "============================================="

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # Required for creating releases
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release directory
      run: |
        mkdir -p release
        find artifacts/ -name "t212-taxes*" -exec cp {} release/ \;

    - name: Generate changelog
      id: changelog
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "## Changes" > CHANGELOG.md
          echo "See commit history for detailed changes." >> CHANGELOG.md
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 