name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Run tests and quality checks before building
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Run quality checks
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
        args: --timeout=10m
      continue-on-error: true

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 🚀 What's Changed since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
        else
          echo "## 🎉 Initial Release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "First release of T212 Taxes - A comprehensive tool for processing Trading 212 CSV exports!" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### ✨ Features" >> $GITHUB_OUTPUT
          echo "- Process Trading 212 CSV files with tax calculations" >> $GITHUB_OUTPUT
          echo "- Interactive terminal UI with beautiful reports" >> $GITHUB_OUTPUT
          echo "- Multiple output formats (table, JSON)" >> $GITHUB_OUTPUT
          echo "- Portfolio valuation and income analysis" >> $GITHUB_OUTPUT
          echo "- Cross-platform support (Windows, macOS, Linux)" >> $GITHUB_OUTPUT
        fi
        echo "" >> $GITHUB_OUTPUT
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build binaries for multiple platforms
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, create-release]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="t212-taxes-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        VERSION=${{ needs.create-release.outputs.version }}
        COMMIT=${GITHUB_SHA}
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        echo "Building $BINARY_NAME with version $VERSION"
        
        go build \
          -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE} -X main.builtBy=github-actions" \
          -o ${BINARY_NAME} \
          ./cmd/t212-taxes
        
        # Verify binary
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "amd64" ]; then
          ./${BINARY_NAME} version
        fi

    - name: Create archive
      run: |
        BINARY_NAME="t212-taxes-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        ARCHIVE_NAME="t212-taxes-${{ matrix.goos }}-${{ matrix.goarch }}"
        
        mkdir -p ${ARCHIVE_NAME}
        cp ${BINARY_NAME} ${ARCHIVE_NAME}/
        cp README.md ${ARCHIVE_NAME}/
        cp LICENSE ${ARCHIVE_NAME}/
        cp CHANGELOG.md ${ARCHIVE_NAME}/
        
        # Add config.yaml if it exists
        if [ -f "config.yaml" ]; then
          cp config.yaml ${ARCHIVE_NAME}/
        fi
        
        # Create platform-specific archives
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r ${ARCHIVE_NAME}.zip ${ARCHIVE_NAME}/
          echo "ARCHIVE_FILE=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf ${ARCHIVE_NAME}.tar.gz ${ARCHIVE_NAME}/
          echo "ARCHIVE_FILE=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi
        
        # Calculate checksum
        if [ "${{ matrix.goos }}" = "windows" ]; then
          sha256sum ${ARCHIVE_NAME}.zip > ${ARCHIVE_NAME}.zip.sha256
        else
          sha256sum ${ARCHIVE_NAME}.tar.gz > ${ARCHIVE_NAME}.tar.gz.sha256
        fi

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        files: |
          ${{ env.ARCHIVE_FILE }}
          ${{ env.ARCHIVE_FILE }}.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, create-release]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.create-release.outputs.version }}
          COMMIT=${{ github.sha }}
          DATE=${{ steps.meta.outputs.json.date }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Update release with installation instructions
  update-release:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries, build-docker]
    steps:
    - name: Update release with installation instructions
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        append_body: true
        body: |
          
          ## 📦 Installation
          
          ### Quick Install
          
          **macOS (Homebrew) - Coming Soon!**
          ```bash
          # Future Homebrew installation
          brew tap Lizzergas/t212-taxes
          brew install t212-taxes
          ```
          
          **Go Install:**
          ```bash
          go install github.com/${{ github.repository }}/cmd/t212-taxes@${{ needs.create-release.outputs.version }}
          ```
          
          **Docker:**
          ```bash
          docker run --rm -v $(pwd)/exports:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }} analyze --dir /app/data
          ```
          
          ### Download Binaries
          
          | Platform | Architecture | Download | Checksum |
          |----------|--------------|----------|----------|
          | **Linux** | x64 | [📥 Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-linux-amd64.tar.gz) | [🔒 SHA256](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-linux-amd64.tar.gz.sha256) |
          | **Linux** | ARM64 | [📥 Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-linux-arm64.tar.gz) | [🔒 SHA256](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-linux-arm64.tar.gz.sha256) |
          | **macOS** | Intel | [📥 Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-darwin-amd64.tar.gz) | [🔒 SHA256](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-darwin-amd64.tar.gz.sha256) |
          | **macOS** | Apple Silicon | [📥 Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-darwin-arm64.tar.gz) | [🔒 SHA256](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-darwin-arm64.tar.gz.sha256) |
          | **Windows** | x64 | [📥 Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-windows-amd64.zip) | [🔒 SHA256](https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-windows-amd64.zip.sha256) |
          
          ### Quick Start Commands
          
          **macOS/Linux:**
          ```bash
          # Download and extract (replace with your platform)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-darwin-arm64.tar.gz | tar -xz
          cd t212-taxes-darwin-arm64
          
          # Make executable and run
          chmod +x t212-taxes-darwin-arm64
          ./t212-taxes-darwin-arm64 version
          ./t212-taxes-darwin-arm64 --help
          ```
          
          **Docker with local data:**
          ```bash
          # Run with your CSV files in ./exports directory
          docker run --rm -v $(pwd)/exports:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }} analyze --dir /app/data
          
          # Interactive mode
          docker run --rm -it -v $(pwd)/exports:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
          ```
          
          ### 🔐 Verify Downloads
          
          Always verify your downloads using the provided SHA256 checksums:
          ```bash
          # Example for Linux AMD64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/t212-taxes-linux-amd64.tar.gz.sha256
          sha256sum -c t212-taxes-linux-amd64.tar.gz.sha256
          ```
          
          ---
          
          **🐛 Found an issue?** [Report it here](https://github.com/${{ github.repository }}/issues)
          **💬 Questions?** [Start a discussion](https://github.com/${{ github.repository }}/discussions)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 